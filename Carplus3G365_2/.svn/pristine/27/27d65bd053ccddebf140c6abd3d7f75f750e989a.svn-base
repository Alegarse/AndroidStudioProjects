package com.example.carplus3g365v2;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.app.TimePickerDialog;
import android.content.ClipData;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.drawable.BitmapDrawable;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.util.Base64;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import com.example.carplus3g365v2.Adapters.SpecialAdapterDisponibles;
import com.example.carplus3g365v2.Modelos.DecimalInputTextWatcher;
import com.example.carplus3g365v2.Modelos.Methods;
import com.example.carplus3g365v2.RestClient.RequestMethod;

import org.json.JSONArray;
import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;

public class Reservar extends AppCompatActivity {

    // Variables para la cámara e imágenes
    private final static int MAX_PICTURE_WIDTH = 1333;
    private final static int MAX_PICTURE_HEIGHT = 750;
    int NUM_IMAGENES = 0;
    private Integer MAX_PICTURES = 3;
    String ruta_imagen;

    private Methods metodo;

    static final int REQUEST_TAKE_PHOTO = 1;
    static final int RESULT_LOAD_IMAGE = 2;


    CharSequence option1, option2;
    CharSequence[] _options;
    Integer itemSeleccionado = 0;

    // Elementos de la actividad
    private Spinner spinOEV, spinORV, spinExtra, spinExtraUnd;
    private EditText txtOEV, txtORV, txtF1, txtH1, txtF2, txtH2,txtGP, txtMatricula, txtModelo;
    public EditText txtNombre, txtTelefono, txtEmail, txtObservaciones,txtOcupacion, txtExtras, txtTotal;
    private Button btnDisponibles, btnFotosAdd, btnShowExtras, btnLimpiar, btnConfirmar;
    private Button btnExtrasCancelar, btnExtrasAdd;
    private LinearLayout thumbnails, contenedorExtras, rowFotos;
    private TextView txtVehiculosNoDispobles;
    private TableRow rowFotosBody;

    private final static long MILLISECS_PER_DAY = 24 * 60 * 60 * 1000;
    private final static long MILLISECS_PER_HOUR = 60 * 60 * 1000;
    public static final Pattern EMAIL_ADDRESS_PATTERN = Pattern.compile("[a-zA-Z0-9\\+\\.\\_\\%\\-\\+]{1,256}\\@[a-zA-Z0-9][a-zA-Z0-9\\-]{0,64}(\\.[a-zA-Z0-9][a-zA-Z0-9\\-]{0,25})+");

    public RestClient conexionHTTP;
    public Carplus3G CF;
    public String JSONDATA;
    public Integer CARGAR_DIA_EXTRA_HORAS = 0;
    public Integer DIAS_FACTURADOS = 1;
    public String TARIFA_APLICADA = "";
    public Integer CUENTA_INTERNET = 0;

    //Extras
    ArrayAdapter<String> adapterExtras = null;
    public List<Integer> extCodes = new ArrayList<Integer>();
    public List<String> extNames = new ArrayList<String>();
    public List<Double> extImportes = new ArrayList<Double>();
    public List<Integer> extTipos = new ArrayList<Integer>();
    public List<Double> extMax = new ArrayList<Double>();
    public List<Double> extMin = new ArrayList<Double>();

    //Array del listado de disponibles
    public ListView listDisponibles;
    SpecialAdapterDisponibles listAdapter;
    public ArrayList<HashMap<String, String>> datosDisponibles = new ArrayList<HashMap<String, String>>();

    public asyncReservasInit tareaInicio;
    public asyncReservasDisponibles tareaDisponibles;
    public asyncReservasConfirmar tareaReservar;

    ArrayAdapter<String> adapterExtrasUnd = null;
    public List<String> extUnds = new ArrayList<String>(Arrays.asList("1", "2", "3", "4", "5", "6", "7", "8", "9"));

    private DatePickerDialog dialogFecha;
    private TimePickerDialog dialogHora;

    public Dialog dialogDisponibles, dialogExtras, dialogFinReserva, dialogVisor;
    public Button dgDispBtnCancelar, dgDispBtnConfirmar, dgFinReservaAceptar;
    public TextView txtNumReserva, txtSinFotos;
    public ProgressDialog miDialog;

    public Integer FIELDFECHA;
    public Integer FIELDHORA;

    //Sucursales
    ArrayAdapter<String> adapterOEV = null;
    ArrayAdapter<String> adapterORV = null;
    public List<Integer> sucCodes = new ArrayList<Integer>();
    public List<String> sucNames = new ArrayList<String>();

    public DecimalInputTextWatcher txtWatcherOcupacion;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_reservar);

        // Instanciamos los elementos de la actividad
        option1 = getString(R.string.fromCamera);
        option2 = getString(R.string.from_gal);
        _options = new CharSequence[]{option1, option2};

        // Cards de oficinas de entregas y recogidas
        spinOEV = findViewById(R.id.spinOev);
        spinORV = findViewById(R.id.spinOrv);
        txtOEV = findViewById(R.id.txtOev);
        txtORV = findViewById(R.id.txtOrv);
        txtF1 = findViewById(R.id.txtF1);
        txtF2 = findViewById(R.id.txtF2);
        txtH1 = findViewById(R.id.txtH1);
        txtH2 = findViewById(R.id.txtH2);

        // Card datos vehículo
        txtGP = findViewById(R.id.etGrupo);
        txtMatricula = findViewById(R.id.etMatricula);
        txtModelo = findViewById(R.id.txtModelo);
        btnDisponibles = findViewById(R.id.btnDisponibles);

        // Card Imágenes vehículo
        rowFotos = findViewById(R.id.linearFotosVeh);
        rowFotosBody = findViewById(R.id.cntFotosBody);
        thumbnails = findViewById(R.id.thumbnails);
        btnFotosAdd = findViewById(R.id.btnHacerFotos);
        txtSinFotos = findViewById(R.id.txtSinFotos);

        // Card Extras
        btnShowExtras = findViewById(R.id.btnAddExtra);
        contenedorExtras = findViewById(R.id.rContExtras);

        // Card Datos Cliente
        txtNombre = findViewById(R.id.txtNombreC);
        txtTelefono = findViewById(R.id.txtTelefonoC);
        txtEmail = findViewById(R.id.txtEmailC);
        txtObservaciones = findViewById(R.id.txtObsC);

        // Card Resumen
        txtOcupacion = findViewById(R.id.txtOcupacion);
        txtExtras = findViewById(R.id.txtExtrasResumen);
        txtTotal = findViewById(R.id.txtTotalReserva);

        btnLimpiar = findViewById(R.id.limpiarR);
        btnConfirmar = findViewById(R.id.confirmarR);
        ImageButton btnCerrarSesion = findViewById(R.id.salirR);
        ImageButton btnMPpal = findViewById(R.id.menuPpalR);

        // Variables de uso de la actividad
        sucCodes.add(0);
        sucNames.add(getString(R.string.select_suc));
        extCodes.add(0);
        extNames.add(getString(R.string.select_extra));
        extImportes.add(0d);
        extTipos.add(0);
        extMax.add(0d);
        extMin.add(0d);

        conexionHTTP = new RestClient(Carplus3G.URL);

        spinOEV.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {

                txtGP.setText("");
                txtMatricula.setText("");
                txtModelo.setText("");
                contenedorExtras.removeAllViews();
                txtOcupacion.removeTextChangedListener(txtWatcherOcupacion);
                txtOcupacion.setText(sqlToMoney(0d));
                txtOcupacion.addTextChangedListener(txtWatcherOcupacion);
                if (i > 0) {
                    if (txtOEV.getText().toString().trim().equals("")) {
                        txtOEV.setText(sucNames.get(i));
                    }
                }
                spinOEV.setTag(i);
                sumarImportes();
            }
            public void onNothingSelected(AdapterView<?> adapterView) {
            }
        });

        spinORV.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                if (i > 0) {
                    if (txtORV.getText().toString().trim().equals("")) {
                        txtORV.setText(sucNames.get(i));
                    }
                }
            }
            public void onNothingSelected(AdapterView<?> adapterView) {
            }
        });

        txtWatcherOcupacion = new DecimalInputTextWatcher(txtOcupacion, 2);
        txtOcupacion.addTextChangedListener(txtWatcherOcupacion);

        txtOcupacion.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            public void onFocusChange(View view, boolean hasFocus) {
                Double importe = moneyToSql(txtOcupacion.getText().toString());
                txtOcupacion.removeTextChangedListener(txtWatcherOcupacion);
                txtOcupacion.setText(sqlToMoney(importe));
                txtOcupacion.addTextChangedListener(txtWatcherOcupacion);
                sumarImportes();
            }
        });

        metodo = new Methods(Reservar.this);

        //Escuchadores Botones
        btnMPpal.setOnClickListener(view -> metodo.iraMenuPpal());
        btnCerrarSesion.setOnClickListener(view -> metodo.cerrarSesion());

        // Escuchadores para los EditText
        txtF1.setOnClickListener(v -> txtF1Click(v));
        txtF2.setOnClickListener(v -> txtF2Click(v));
        txtH1.setOnClickListener(v -> txtH1Click(v));
        txtH2.setOnClickListener(v -> txtH2Click(v));
        btnDisponibles.setOnClickListener(v -> btnDisponiblesClick(v));
        btnShowExtras.setOnClickListener(v -> btnShowAddExtrasClick(v));
        btnLimpiar.setOnClickListener(v -> btnLimpiarClick(true));
        btnConfirmar.setOnClickListener(view -> btnConfirmarReservaClick(view));
        btnFotosAdd.setOnClickListener(view -> {
            btnCamaraClick();
        });

        Carplus3G constantes = ((Carplus3G) getApplicationContext());
        MAX_PICTURES = constantes.getMaxPictures();

        if (constantes.getPermisoReservasFoto() == 0) {
            thumbnails.setVisibility(View.GONE);
        }

        //Iniciamos la carga de los datos necesarios
        tareaInicio = new asyncReservasInit();
        tareaInicio.execute(null, null, null);

    }

    public void onStart() {
        super.onStart();

        Carplus3G constantes = ((Carplus3G) getApplicationContext());
        if (!constantes.cmpLastDate()) {
            constantes.setLastDate();
            constantes.setcargadoVersion(0);
            Intent i = new Intent();
            i.setClass(Reservar.this, Login.class);
            startActivity(i);
            Reservar.this.finish();
            return;
        }
    }

    protected void onActivityResult(int requestCode, int resultCode, Intent data) {

        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK) {
            switch (requestCode) {
                case REQUEST_TAKE_PHOTO:
                    try {
                        BitmapFactory.Options options = new BitmapFactory.Options();
                        options.inPreferredConfig = Bitmap.Config.RGB_565;
                        Bitmap bitmap = BitmapFactory.decodeFile(ruta_imagen, options);
                        bitmap = redimensiones(bitmap);
                        addFoto(bitmap);
                    } catch (Exception e) {
                        Toast.makeText(Reservar.this, R.string.e_proc_photo, Toast.LENGTH_SHORT).show();
                    }
                    break;
                case RESULT_LOAD_IMAGE:
                    if (data != null) {
                        try {
                            if (data.getData() != null) {

                                Uri uri = data.getData();
                                int fotos = thumbnails.getChildCount();

                                // Limito numero de fotos
                                if (fotos + 1 > (MAX_PICTURES + 1)) {
                                    Toast.makeText(Reservar.this, getString(R.string.onlyAllowed)+ " " + String.valueOf(MAX_PICTURES)+ " " + getString(R.string.onlyAllowed_2), Toast.LENGTH_SHORT).show();
                                    return;
                                }

                                Bitmap bitmap = decodeUri(uri);
                                bitmap = redimensiones(bitmap);
                                addFoto(bitmap);

                            } else {
                                if (data.getClipData() != null) {
                                    ClipData mClipData = data.getClipData();

                                    int fotos = thumbnails.getChildCount();
                                    int fotosSeleccionadas = mClipData.getItemCount();

                                    // Limito numero de fotos
                                    if (fotos + fotosSeleccionadas > (MAX_PICTURES + 1)) {
                                        Toast.makeText(Reservar.this, getString(R.string.onlyAllowed)+ " " + String.valueOf(MAX_PICTURES)+ " " + getString(R.string.onlyAllowed_2), Toast.LENGTH_SHORT).show();
                                        return;
                                    }

                                    for (int i = 0; i < mClipData.getItemCount(); i++) {
                                        ClipData.Item item = mClipData.getItemAt(i);
                                        Uri uri = item.getUri();

                                        Bitmap bitmap = decodeUri(uri);
                                        bitmap = redimensiones(bitmap);
                                        addFoto(bitmap);
                                    }
                                }
                            }
                        } catch (Exception e) {
                            Toast.makeText(Reservar.this, R.string.e_proc_photo, Toast.LENGTH_SHORT).show();
                        }
                    }
                    break;
            }
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {

        menu.add(1, R.id.menuLogout, 1, R.string.change_user).setIcon(
                R.drawable.user);
        menu.add(2, R.id.menuSalir, 2, R.string.exit).setIcon(R.drawable.exit);

        return super.onPrepareOptionsMenu(menu);

    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        getApplicationContext();

        switch (item.getItemId()) {

            case R.id.menuSalir:
                System.exit(0);
                break;
            case R.id.menuLogout:
                Carplus3G constantes = ((Carplus3G) getApplicationContext());
                constantes.setIniciadoSesion(false);

                Intent i = new Intent();
                i.setClass(this, Login.class);
                startActivity(i);
                this.finish();
                break;
        }
        return false;
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK) {
            return false;
        }
        return false;
    }

    private String sqlToMoney(Double num) {

        DecimalFormatSymbols otherSymbols = new DecimalFormatSymbols();
        otherSymbols.setDecimalSeparator(',');
        otherSymbols.setGroupingSeparator('.');
        DecimalFormat df = new DecimalFormat("###,###,###,##0.00", otherSymbols);

        return df.format(num);
    }

    private Double moneyToSql(String importe) {
        importe = importe.replace(".", "");
        importe = importe.replace(",", ".");

        if (importe.trim().equals("") || importe.trim().equals(".")) {
            importe = "0.0";
        }

        return Double.valueOf(importe);
    }

    public void sumarImportes() {
        double imp_ocupacion = 0d;
        double imp_extras = 0d;
        double imp_total = 0d;

        imp_ocupacion = moneyToSql(txtOcupacion.getText().toString());

        for (int i = 0; i < contenedorExtras.getChildCount(); i++) {
            View v = contenedorExtras.getChildAt(i);
            TextView txtImporteExtra = (TextView) v.findViewById(R.id.itemExtraTotal);

            imp_extras += moneyToSql(txtImporteExtra.getText().toString());
        }

        imp_total = imp_ocupacion + imp_extras;

        txtOcupacion.removeTextChangedListener(txtWatcherOcupacion);
        txtOcupacion.setText(sqlToMoney(imp_ocupacion));
        txtOcupacion.addTextChangedListener(txtWatcherOcupacion);


        txtExtras.setText(sqlToMoney(imp_extras));
        txtTotal.setText(sqlToMoney(imp_total));
    }

    private void txtF1Click(View v) {
        FIELDFECHA = 1;

        int mYear = 0;
        int mMonth = 0;
        int mDay = 0;

        String f1 = txtF1.getText().toString().trim();

        if (f1.equals("")) {
            Calendar c = Calendar.getInstance();
            mYear = c.get(Calendar.YEAR);
            mMonth = c.get(Calendar.MONTH);
            mDay = c.get(Calendar.DAY_OF_MONTH);
        } else {
            mYear = Integer.parseInt(f1.substring(6, 10));
            mMonth = Integer.parseInt(f1.substring(3, 5)) - 1;
            mDay = Integer.parseInt(f1.substring(0, 2));
        }

        dialogFecha = new DatePickerDialog(Reservar.this, datePickerListener, mYear, mMonth, mDay);
        dialogFecha.setTitle(getString(R.string.select_date_e));
        dialogFecha.show();
    }

    private void txtF2Click(View v) {
        FIELDFECHA = 2;
        String f2 = txtF2.getText().toString().trim();

        int mYear = 0;
        int mMonth = 0;
        int mDay = 0;

        if (f2.equals("")) {
            Calendar c = Calendar.getInstance();
            mYear = c.get(Calendar.YEAR);
            mMonth = c.get(Calendar.MONTH);
            mDay = c.get(Calendar.DAY_OF_MONTH);
        } else {
            mYear = Integer.parseInt(f2.substring(6, 10));
            mMonth = Integer.parseInt(f2.substring(3, 5)) - 1;
            mDay = Integer.parseInt(f2.substring(0, 2));
        }

        dialogFecha = new DatePickerDialog(Reservar.this, datePickerListener, mYear, mMonth, mDay);
        dialogFecha.setTitle(getString(R.string.select_date_r));
        dialogFecha.show();
    }

    private void txtH1Click(View v) {
        FIELDHORA = 1;

        String h1 = txtH1.getText().toString().trim();

        int mHour = 0;
        int mMinute = 0;

        if (h1.equals("")) {
            Calendar c = Calendar.getInstance();
            mHour = c.get(Calendar.HOUR_OF_DAY);
            mMinute = c.get(Calendar.MINUTE);
        } else {
            mHour = Integer.parseInt(h1.substring(0, 2));
            mMinute = Integer.parseInt(h1.substring(3, 5));
        }

        dialogHora = new TimePickerDialog(Reservar.this, timePickerListener, mHour, mMinute, true);
        dialogHora.setTitle(getString(R.string.select_hour_e));
        dialogHora.show();
    }

    private void txtH2Click(View v) {
        FIELDHORA = 2;

        String h2 = txtH2.getText().toString().trim();

        int mHour = 0;
        int mMinute = 0;

        if (h2.equals("")) {
            Calendar c = Calendar.getInstance();
            mHour = c.get(Calendar.HOUR_OF_DAY);
            mMinute = c.get(Calendar.MINUTE);
        } else {
            mHour = Integer.parseInt(h2.substring(0, 2));
            mMinute = Integer.parseInt(h2.substring(3, 5));
        }
        dialogHora = new TimePickerDialog(Reservar.this, timePickerListener, mHour, mMinute, true);
        dialogHora.setTitle(getString(R.string.select_hour_r));
        dialogHora.show();
    }

    private DatePickerDialog.OnDateSetListener datePickerListener = new DatePickerDialog.OnDateSetListener() {

        // when dialog box is closed, below method will be called.
        public void onDateSet(DatePicker view, int selectedYear, int selectedMonth, int selectedDay) {

            int dia = selectedDay;
            int mes = selectedMonth + 1;
            int anio = selectedYear;

            String sdia = "";
            String smes = "";
            String sanio = "";

            if (dia <= 9) {
                sdia = "0" + dia;
            } else {
                sdia = "" + dia;
            }

            if (mes <= 9) {
                smes = "0" + mes;
            } else {
                smes = "" + mes;
            }

            sanio = "" + anio;

            String fecha = new StringBuilder().append(sdia).append("/").append(smes).append("/").append(sanio).toString();

            switch (FIELDFECHA) {
                case 1:
                    if (!txtF1.getText().toString().equals(fecha)) {
                        txtGP.setText("");
                        txtMatricula.setText("");
                        txtModelo.setText("");

                        contenedorExtras.removeAllViews();

                        txtOcupacion.removeTextChangedListener(txtWatcherOcupacion);
                        txtOcupacion.setText(sqlToMoney(0d));
                        txtOcupacion.addTextChangedListener(txtWatcherOcupacion);
                    }

                    txtF1.setText(fecha);
                    break;
                case 2:
                    if (!txtF2.getText().toString().equals(fecha)) {
                        txtGP.setText("");
                        txtMatricula.setText("");
                        txtModelo.setText("");

                        contenedorExtras.removeAllViews();

                        txtOcupacion.removeTextChangedListener(txtWatcherOcupacion);
                        txtOcupacion.setText(sqlToMoney(0d));
                        txtOcupacion.addTextChangedListener(txtWatcherOcupacion);
                    }
                    txtF2.setText(fecha);
                    break;
            }
        }
    };

    private TimePickerDialog.OnTimeSetListener timePickerListener = new TimePickerDialog.OnTimeSetListener() {

        public void onTimeSet(TimePicker timePicker, int selectedHour, int selectedMinute) {

            int h = selectedHour;
            int m = selectedMinute;

            String sh = "";
            String sm = "";

            if (h <= 9) {
                sh = "0" + h;
            } else {
                sh = "" + h;
            }

            if (m <= 9) {
                sm = "0" + m;
            } else {
                sm = "" + m;
            }

            String hora = sh + ":" + sm;

            switch (FIELDHORA) {
                case 1:
                    if (!txtH1.getText().toString().equals(hora)) {
                        txtGP.setText("");
                        txtMatricula.setText("");
                        txtModelo.setText("");

                        contenedorExtras.removeAllViews();

                        txtOcupacion.removeTextChangedListener(txtWatcherOcupacion);
                        txtOcupacion.setText(sqlToMoney(0d));
                        txtOcupacion.addTextChangedListener(txtWatcherOcupacion);
                    }

                    txtH1.setText(hora);
                    break;
                case 2:
                    if (!txtH2.getText().toString().equals(hora)) {
                        txtGP.setText("");
                        txtMatricula.setText("");
                        txtModelo.setText("");

                        contenedorExtras.removeAllViews();

                        txtOcupacion.removeTextChangedListener(txtWatcherOcupacion);
                        txtOcupacion.setText(sqlToMoney(0d));
                        txtOcupacion.addTextChangedListener(txtWatcherOcupacion);
                    }
                    txtH2.setText(hora);
                    break;
            }
        }
    };

    private void btnDisponiblesClick(View v) {

        //Comprobaciones previas
        int oev = spinOEV.getSelectedItemPosition();
        String f1 = txtF1.getText().toString().trim();
        String f2 = txtF2.getText().toString().trim();
        String h1 = txtH1.getText().toString().trim();
        String h2 = txtH2.getText().toString().trim();

        if (oev == 0) {
            Toast.makeText(Reservar.this, R.string.please_suc_e, Toast.LENGTH_SHORT).show();
            return;
        }

        if (f1.equals("")) {
            Toast.makeText(Reservar.this, R.string.please_date_e, Toast.LENGTH_SHORT).show();
            return;
        }

        if (h1.equals("")) {
            Toast.makeText(Reservar.this, R.string.please_hour_e, Toast.LENGTH_SHORT).show();
            return;
        }

        if (f2.equals("")) {
            Toast.makeText(Reservar.this, R.string.please_date_r, Toast.LENGTH_SHORT).show();
            return;
        }

        if (h2.equals("")) {
            Toast.makeText(Reservar.this, R.string.please_hour_r, Toast.LENGTH_SHORT).show();
            return;
        }


        dialogDisponibles = new Dialog(Reservar.this, R.style.FullHeightDialog);
        dialogDisponibles.setContentView(R.layout.dg_disponibles);

        dgDispBtnCancelar = dialogDisponibles.findViewById(R.id.btnDgDisponiblesCancelar);
        dgDispBtnConfirmar = dialogDisponibles.findViewById(R.id.btnDgDisponiblesAdd);
        txtVehiculosNoDispobles = dialogDisponibles.findViewById(R.id.txtVehiculosNoDispobles);

        listDisponibles = dialogDisponibles.findViewById(R.id.listView);

        listDisponibles.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {


                HashMap<String, String> map = datosDisponibles.get(i);
                int marcado = Integer.valueOf(map.get("chk"));

                if (marcado == 1) {
                    map.put("chk", "0");
                } else {
                    map.put("chk", "1");
                }

                datosDisponibles.set(i, map);

                for (int z = 0; z < datosDisponibles.size(); z++) {
                    if (z != i) {
                        HashMap<String, String> map2 = datosDisponibles.get(z);
                        map2.put("chk", "0");
                        datosDisponibles.set(z, map2);
                    }
                }

                //Refresco listView
                listAdapter.notifyDataSetChanged();
            }
        });

        txtVehiculosNoDispobles.setVisibility(View.GONE);

        dgDispBtnCancelar.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                dialogDisponibles.dismiss();
            }
        });

        dgDispBtnConfirmar.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {

                int posSeleccionado = -1;

                if (datosDisponibles.size() > 0) {
                    for (int z = 0; z < datosDisponibles.size(); z++) {
                        HashMap<String, String> map = datosDisponibles.get(z);
                        if (Integer.valueOf(map.get("chk")) == 1) {
                            posSeleccionado = z;
                            break;
                        }
                    }

                    if (posSeleccionado >= 0) {
                        HashMap<String, String> map = datosDisponibles.get(posSeleccionado);
                        txtGP.setText(map.get("grp"));
                        txtMatricula.setText(map.get("mtr"));
                        txtModelo.setText(map.get("mod"));

                        txtOcupacion.removeTextChangedListener(txtWatcherOcupacion);
                        txtOcupacion.setText(sqlToMoney(Double.valueOf(map.get("imp"))));
                        txtOcupacion.addTextChangedListener(txtWatcherOcupacion);

                        sumarImportes();
                    } else {
                        Toast.makeText(Reservar.this, R.string.no_select_veh, Toast.LENGTH_SHORT).show();
                        return;
                    }
                }
                dialogDisponibles.dismiss();
            }
        });

        WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
        Window window = dialogDisponibles.getWindow();
        lp.copyFrom(window.getAttributes());
        lp.width = WindowManager.LayoutParams.FILL_PARENT;
        lp.height = WindowManager.LayoutParams.WRAP_CONTENT;
        window.setAttributes(lp);

        dialogDisponibles.show();

        //Iniciamos la carga de los datos necesarios
        tareaDisponibles = new asyncReservasDisponibles();
        tareaDisponibles.execute(null, null, null);
    }

    private class asyncReservasInit extends AsyncTask<Void, Integer, Boolean> {

        @Override
        protected void onPreExecute() {
            miDialog = new ProgressDialog(Reservar.this);
            miDialog.setMessage(getString(R.string.msgserv));
            miDialog.setCancelable(false);
            miDialog.show();
        }

        @Override
        protected Boolean doInBackground(Void... params) {

            CF = ((Carplus3G) getApplicationContext());

            try {
                conexionHTTP.AddParam("accion", "reservas_init");
                conexionHTTP.AddParam("id", CF.getTerminalId());
                conexionHTTP.AddParam("empresa", CF.getEmpresa());
                conexionHTTP.AddParam("firma", Carplus3G.SHA256("rini"+CF.getEmpresa()));
                conexionHTTP.Execute(RequestMethod.POST);
            } catch (Exception e) {
                // Usado solo para capturar la excepción
            }

            JSONDATA = conexionHTTP.getResponse();
            return true;
        }

        @Override
        protected void onProgressUpdate(Integer... values) {
        }

        @Override
        protected void onPostExecute(Boolean result) {
            miDialog.dismiss();

            //Toast.makeText(getApplicationContext(),JSONDATA, Toast.LENGTH_LONG).show();

            if (result) {
                if (!JSONDATA.equals("error")) {

                    try {
                        JSONObject json = new JSONObject(JSONDATA);

                        int estado = json.getInt("status");
                        String mensaje = json.getString("statusMsg");

                        if (estado == 1) {
                            JSONObject content = json.getJSONObject("content");
                            JSONArray sucursales = content.getJSONArray("suc");
                            JSONArray extras = content.getJSONArray("ext");
                            CARGAR_DIA_EXTRA_HORAS = Integer.valueOf(content.getString("dext"));

                            for (int i = 0, size = sucursales.length(); i < size; i++) {
                                JSONObject sucursal = sucursales.getJSONObject(i);
                                sucCodes.add(sucursal.getInt("cod"));
                                sucNames.add(sucursal.getString("tit"));
                            }

                            for (int i = 0, size = extras.length(); i < size; i++) {
                                JSONObject extra = extras.getJSONObject(i);
                                extCodes.add(extra.getInt("cod"));
                                extNames.add(extra.getString("nom"));
                                extImportes.add(extra.getDouble("imp"));
                                extTipos.add(extra.getInt("tipo"));
                                extMax.add(extra.getDouble("max"));
                                extMin.add(extra.getDouble("min"));
                            }

                            adapterOEV = new ArrayAdapter<String>(Reservar.this, android.R.layout.simple_spinner_item, sucNames);
                            adapterOEV.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                            adapterORV = new ArrayAdapter<String>(Reservar.this, android.R.layout.simple_spinner_item, sucNames);
                            adapterORV.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

                            spinOEV.setAdapter(adapterOEV);
                            spinORV.setAdapter(adapterORV);
                        } else {
                            Toast.makeText(getApplicationContext(), getString(R.string.error_happened)+" "+ mensaje, Toast.LENGTH_LONG).show();
                            metodo.iraMenuPpal();
                        }
                    } catch (Exception e) {
                        Toast.makeText(getApplicationContext(), getString(R.string.error_2p)+" "+ e.getMessage(), Toast.LENGTH_LONG).show();
                        metodo.iraMenuPpal();
                    }
                } else {
                    Carplus3G.dialogConexion(Reservar.this);
                    metodo.iraMenuPpal();
                }
            }
        }

        @Override
        protected void onCancelled() {
        }
    }

    private class asyncReservasDisponibles extends AsyncTask<Void, Integer, Boolean> {

        Integer disponibles_oev;

        String disponibles_f1;
        String disponibles_h1;
        String disponibles_f2;
        String disponibles_h2;

        @Override
        protected void onPreExecute() {
            miDialog = new ProgressDialog(Reservar.this);
            miDialog.setMessage(getString(R.string.getting_veh_disp));
            miDialog.setCancelable(false);
            miDialog.show();

            disponibles_oev = sucCodes.get(spinOEV.getSelectedItemPosition());
            disponibles_f1 = txtF1.getText().toString();
            disponibles_h1 = txtH1.getText().toString();
            disponibles_f2 = txtF2.getText().toString();
            disponibles_h2 = txtH2.getText().toString();

            DIAS_FACTURADOS = 1;

            SimpleDateFormat formatDate = new SimpleDateFormat("dd/MM/yyyy HH:mm");
            Date f1 = null;
            Date f2 = null;

            if (!disponibles_f1.trim().equals("") && !disponibles_h1.trim().equals("")) {
                try {
                    f1 = formatDate.parse(disponibles_f1 + " " + disponibles_h1);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (!disponibles_f2.trim().equals("") && !disponibles_h2.trim().equals("")) {
                try {
                    f2 = formatDate.parse(disponibles_f2 + " " + disponibles_h2);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (f1 != null && f2 != null) {
                DIAS_FACTURADOS = fn_DiferenciaDias(f1, f2);

                int horas = fn_DiferenciaHoras(f1, f2);

                if (CARGAR_DIA_EXTRA_HORAS > 0 && horas >= CARGAR_DIA_EXTRA_HORAS && f1.getTime() != f2.getTime()) {
                    DIAS_FACTURADOS += 1;
                }

                if (DIAS_FACTURADOS <= 0) {
                    DIAS_FACTURADOS = 1;
                }
            }
        }

        @Override
        protected Boolean doInBackground(Void... params) {

            CF = ((Carplus3G) getApplicationContext());

            try {
                conexionHTTP.AddParam("accion", "reservas_get_disponibles");
                conexionHTTP.AddParam("firma", Carplus3G.SHA256("rgdis"+disponibles_oev));
                conexionHTTP.AddParam("empresa", CF.getEmpresa());
                conexionHTTP.AddParam("id", CF.getTerminalId());
                conexionHTTP.AddParam("oev", String.valueOf(disponibles_oev));
                conexionHTTP.AddParam("f1", disponibles_f1);
                conexionHTTP.AddParam("h1", disponibles_h1);
                conexionHTTP.AddParam("f2", disponibles_f2);
                conexionHTTP.AddParam("h2", disponibles_h2);
                conexionHTTP.AddParam("diasrent", String.valueOf(DIAS_FACTURADOS));
                conexionHTTP.Execute(RequestMethod.POST);
            } catch (Exception e) {
            }

            JSONDATA = conexionHTTP.getResponse();
            return true;
        }

        @Override
        protected void onProgressUpdate(Integer... values) {
        }

        @Override
        protected void onPostExecute(Boolean result) {
            miDialog.dismiss();

            if (result) {
                if (!JSONDATA.equals("error")) {

                    try {
                        JSONObject json = new JSONObject(JSONDATA);

                        int estado = json.getInt("status");
                        String mensaje = json.getString("statusMsg");

                        if (estado == 1) {
                            datosDisponibles.clear();

                            JSONObject content = json.getJSONObject("content");
                            JSONArray vehiculos = content.getJSONArray("vehi");
                            TARIFA_APLICADA = content.getString("tari");
                            CUENTA_INTERNET = content.getInt("cta");

                            //Toast.makeText(getApplicationContext(),String.valueOf(CUENTA_INTERNET), Toast.LENGTH_LONG).show();

                            for (int i = 0, size = vehiculos.length(); i < size; i++) {
                                JSONObject vehi = vehiculos.getJSONObject(i);
                                String mtr = vehi.getString("mtr");
                                String grp = vehi.getString("grp");
                                String mod = vehi.getString("mod");
                                String cdm = vehi.getString("cdm");
                                String und = vehi.getString("und");
                                String imp = vehi.getString("imp");

                                HashMap<String, String> map = new HashMap<String, String>();
                                map.put("mtr", mtr);
                                map.put("grp", grp);
                                map.put("mod", mod);
                                map.put("cdm", cdm);
                                map.put("und", und);
                                map.put("imp", imp);
                                map.put("chk", "0");

                                datosDisponibles.add(map);
                            }

                            if (datosDisponibles.size() > 0) {

                                listAdapter = new SpecialAdapterDisponibles(Reservar.this, datosDisponibles, R.layout.lay_disp_item,
                                        new String[]{"grp", "mod", "und", "imp"}, new int[]{
                                        R.id.itemDispGp,
                                        R.id.itemDispModelo,
                                        R.id.itemDispUnd,
                                        R.id.itemDispImporte});

                                listDisponibles.setAdapter(listAdapter);

                            } else {
                                listDisponibles.setAdapter(null);
                                txtVehiculosNoDispobles.setVisibility(View.VISIBLE);
                            }
                        } else {
                            Toast.makeText(getApplicationContext(), getString(R.string.error_happened)+" " + mensaje, Toast.LENGTH_LONG).show();
                        }
                    } catch (Exception e) {
                        Toast.makeText(getApplicationContext(), getString(R.string.error_2p)+" " + e.getMessage(), Toast.LENGTH_LONG).show();
                        metodo.iraMenuPpal();
                    }
                } else {
                    Carplus3G.dialogConexion(Reservar.this);
                    metodo.iraMenuPpal();
                }
            }
        }

        @Override
        protected void onCancelled() {
        }
    }

    public int fn_DiferenciaDias(Date beginDate, Date endDate) {
        SimpleDateFormat formatDate = new SimpleDateFormat("dd/MM/yyyy HH:mm");
        SimpleDateFormat formatDateAlone = new SimpleDateFormat("dd/MM/yyyy");
        long diff = 0;

        try {
            Date f1 = formatDate.parse(formatDateAlone.format(beginDate) + " 00:00" );
            Date f2 = formatDate.parse(formatDateAlone.format(endDate) + " 00:00");

            long diffInMillies = f2.getTime() - f1.getTime();
            if (diffInMillies > 0){
                diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return (int) diff;
    }

    public int fn_DiferenciaHoras(Date beginDate, Date endDate) {

        SimpleDateFormat formatDate = new SimpleDateFormat("dd/MM/yyyy HH:mm");
        SimpleDateFormat formatDateHour = new SimpleDateFormat("HH:mm");
        long diff = 0;

        try {
            Date f1 = formatDate.parse("01/01/2000" + " " + formatDateHour.format(beginDate));
            Date f2 = formatDate.parse("01/01/2000" + " " + formatDateHour.format(endDate));

            long diffInMillies = f2.getTime() - f1.getTime();
            if (diffInMillies > 0){
                diff = TimeUnit.HOURS.convert(diffInMillies, TimeUnit.MILLISECONDS);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return (int) diff;
    }

    private class asyncReservasConfirmar extends AsyncTask<Void, Integer, Boolean> {

        String extras_codigos = "";
        String extras_conceptos = "";
        String extras_importes = "";
        String extras_unidades = "";
        String extras_total = "";
        String imagenes64 = "";

        //Comprobaciones previas
        String oev = String.valueOf(spinOEV.getSelectedItemPosition());
        String oevtxt = txtOEV.getText().toString().trim();
        String orv = String.valueOf(spinORV.getSelectedItemPosition());
        String orvtxt = txtORV.getText().toString().trim();
        String f1 = txtF1.getText().toString().trim();
        String f2 = txtF2.getText().toString().trim();
        String h1 = txtH1.getText().toString().trim();
        String h2 = txtH2.getText().toString().trim();

        String mtr = txtMatricula.getText().toString().trim();

        String nombre = txtNombre.getText().toString().trim();
        String telefono = txtTelefono.getText().toString().trim();
        String email = txtEmail.getText().toString().trim();
        String obs = txtObservaciones.getText().toString().trim();

        String imp_ocupa = txtOcupacion.getText().toString().trim();
        String imp_extras = txtExtras.getText().toString().trim();
        String imp_total = txtTotal.getText().toString().trim();

        @SuppressLint("WrongThread")
        @Override
        protected void onPreExecute() {
            extras_codigos = "";
            extras_conceptos = "";
            extras_importes = "";
            extras_unidades = "";
            extras_total = "";
            imagenes64 = "";

            miDialog = new ProgressDialog(Reservar.this);
            miDialog.setMessage("Generando reserva");
            miDialog.setCancelable(false);
            miDialog.show();

            int z = contenedorExtras.getChildCount();

            for (int i = 0; i < contenedorExtras.getChildCount(); i++) {
                View v = contenedorExtras.getChildAt(i);
                TextView txtCod = (TextView) v.findViewById(R.id.itemExtraCod);
                TextView txtDesc = (TextView) v.findViewById(R.id.itemExtraConcepto);
                TextView txtImp = (TextView) v.findViewById(R.id.itemExtraImporte);
                TextView txtUnd = (TextView) v.findViewById(R.id.itemExtraUnd);
                TextView txtTot = (TextView) v.findViewById(R.id.itemExtraTotal);

                extras_codigos += "^^"+txtCod.getText().toString().trim();
                extras_conceptos += "^^"+txtDesc.getText().toString().trim();
                extras_importes += "^^"+txtImp.getText().toString().trim();
                extras_unidades += "^^"+txtUnd.getText().toString().trim();
                extras_total += "^^"+txtTot.getText().toString().trim();

            }


            z = thumbnails.getChildCount();

            if (z > 1) {

                for (int i = 1; i < thumbnails.getChildCount(); i++) {
                    View v = thumbnails.getChildAt(i);

                    if (v.getId() != R.id.txtSinFotos) {
                        ImageView btn = (ImageView) v;
                        //Bitmap bmp = toGrayscale(((BitmapDrawable) btn.getDrawable()).getBitmap());
                        Bitmap bmp = ((BitmapDrawable) btn.getDrawable()).getBitmap();

                        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                        int JPEG_QUALITY = 65;
                        bmp.compress(Bitmap.CompressFormat.JPEG, JPEG_QUALITY, byteArrayOutputStream);
                        byte[] byteArray = byteArrayOutputStream.toByteArray();

                        imagenes64 += "^^"+ Base64.encodeToString(byteArray, Base64.DEFAULT);
                    }
                }
            }
        }

        @Override
        protected Boolean doInBackground(Void... params) {

            CF = ((Carplus3G) getApplicationContext());

            try {
                conexionHTTP.AddParam("accion", "reservas_add");
                conexionHTTP.AddParam("firma", Carplus3G.SHA256("radd"+nombre));
                conexionHTTP.AddParam("empresa", CF.getEmpresa());
                conexionHTTP.AddParam("id", CF.getTerminalId());
                conexionHTTP.AddParam("usuario", String.valueOf(CF.getCodUsuario()));
                conexionHTTP.AddParam("dias", String.valueOf(DIAS_FACTURADOS));
                conexionHTTP.AddParam("tarifa", TARIFA_APLICADA);
                conexionHTTP.AddParam("cuenta", String.valueOf(CUENTA_INTERNET));
                conexionHTTP.AddParam("oev", oev);
                conexionHTTP.AddParam("oevtxt", oevtxt);
                conexionHTTP.AddParam("orv", orv);
                conexionHTTP.AddParam("orvtxt", orvtxt);
                conexionHTTP.AddParam("f1", f1);
                conexionHTTP.AddParam("h1", h1);
                conexionHTTP.AddParam("f2", f2);
                conexionHTTP.AddParam("h2", h2);
                conexionHTTP.AddParam("mtr", mtr);
                conexionHTTP.AddParam("nom", nombre);
                conexionHTTP.AddParam("tel", telefono);
                conexionHTTP.AddParam("ema", email);
                conexionHTTP.AddParam("obs", obs);
                conexionHTTP.AddParam("extcod", extras_codigos);
                conexionHTTP.AddParam("extdesc", extras_conceptos);
                conexionHTTP.AddParam("extimp", extras_importes);
                conexionHTTP.AddParam("extund", extras_unidades);
                conexionHTTP.AddParam("exttot", extras_total);
                conexionHTTP.AddParam("impocu", imp_ocupa);
                conexionHTTP.AddParam("impext", imp_extras);
                conexionHTTP.AddParam("imptot", imp_total);
                conexionHTTP.AddParam("img64", imagenes64);

                conexionHTTP.Execute(RequestMethod.POST);
            } catch (Exception e) {
            }

            JSONDATA = conexionHTTP.getResponse();
            return true;
        }

        @Override
        protected void onProgressUpdate(Integer... values) {
        }

        @Override
        protected void onPostExecute(Boolean result) {
            miDialog.dismiss();


            if (result) {
                if (!JSONDATA.equals("error")) {

                    try {
                        JSONObject json = new JSONObject(JSONDATA);

                        int estado = json.getInt("status");
                        String mensaje = json.getString("statusMsg");
                        JSONObject content = json.getJSONObject("content");
                        String err = content.getString("err");
                        String errmsg = content.getString("errmsg");
                        String num_reserva = content.getString("res");

                        if (estado == 1) {
                            if (err.equals("ar01")) {
                                Toast.makeText(getApplicationContext(), errmsg, Toast.LENGTH_LONG).show();

                                txtGP.setText("");
                                txtMatricula.setText("");
                                txtModelo.setText("");

                                contenedorExtras.removeAllViews();

                                txtOcupacion.removeTextChangedListener(txtWatcherOcupacion);
                                txtOcupacion.setText(sqlToMoney(0d));
                                txtOcupacion.addTextChangedListener(txtWatcherOcupacion);

                                sumarImportes();
                                btnDisponibles.requestFocus();
                                return;
                            }

                            // Si esta correcto muestro el dialog
                            dialogFinReserva = new Dialog(Reservar.this, R.style.FullHeightDialog);
                            dialogFinReserva.setContentView(R.layout.dg_n_reserva);

                            dgFinReservaAceptar = dialogFinReserva.findViewById(R.id.txtAceptarNumreserva);
                            txtNumReserva = dialogFinReserva.findViewById(R.id.txtNumreserva);

                            txtNumReserva.setText(num_reserva);

                            dgFinReservaAceptar.setOnClickListener(new View.OnClickListener() {
                                public void onClick(View view) {
                                    btnLimpiarClick(false);
                                    dialogFinReserva.dismiss();
                                }
                            });

                            dialogFinReserva.show();

                            btnLimpiarClick(false);
                        } else {
                            Toast.makeText(getApplicationContext(), getString(R.string.error_happened)+" " + mensaje, Toast.LENGTH_LONG).show();
                        }
                    } catch (Exception e) {
                        Toast.makeText(getApplicationContext(), getString(R.string.error_2p)+" " + e.getMessage(), Toast.LENGTH_LONG).show();
                        metodo.iraMenuPpal();
                    }
                } else {
                    Carplus3G.dialogConexion(Reservar.this);
                    metodo.iraMenuPpal();
                }
            }
        }

        @Override
        protected void onCancelled() {
        }
    }

    public void btnLimpiarClick(Boolean showMsg) {
        DIAS_FACTURADOS = 1;
        TARIFA_APLICADA = "";
        CUENTA_INTERNET = 0;

        spinOEV.setSelection(0);
        spinORV.setSelection(0);
        txtOEV.setText("");
        txtORV.setText("");
        txtF1.setText("");
        txtH1.setText("");
        txtF2.setText("");
        txtH2.setText("");
        txtMatricula.setText("");
        txtGP.setText("");
        txtModelo.setText("");
        txtNombre.setText("");
        txtTelefono.setText("");
        txtEmail.setText("");
        txtObservaciones.setText("");

        contenedorExtras.removeAllViews();

        txtOcupacion.setText(sqlToMoney(0d));
        txtExtras.setText(sqlToMoney(0d));
        txtTotal.setText(sqlToMoney(0d));

        txtOEV.requestFocus();

        for (int x = 0; x < thumbnails.getChildCount(); x++) {
            View v = thumbnails.getChildAt(x);

            if (v.getId() != R.id.txtSinFotos)
            {
                thumbnails.removeView(v);
            }
        }

        txtSinFotos.setVisibility(View.VISIBLE);

        if (showMsg) {
            Toast.makeText(Reservar.this, R.string.data_cleaned, Toast.LENGTH_SHORT).show();
        }
    }

    private void btnShowAddExtrasClick(View v) {
        //Comprobaciones previas
        String mtr = txtMatricula.getText().toString().trim();

        if (mtr.equals("")) {
            Toast.makeText(Reservar.this, R.string.add_ext_need_veh, Toast.LENGTH_SHORT).show();
            return;
        }

        dialogExtras = new Dialog(Reservar.this, R.style.FullHeightDialog);
        dialogExtras.setContentView(R.layout.dg_extras);

        spinExtra = dialogExtras.findViewById(R.id.spinDgExtraCod);
        spinExtraUnd = dialogExtras.findViewById(R.id.spinDgExtraUnd);
        btnExtrasCancelar = dialogExtras.findViewById(R.id.btnDgExtraCancelar);
        btnExtrasAdd = dialogExtras.findViewById(R.id.btnDgExtraAdd);

        adapterExtras = new ArrayAdapter<String>(Reservar.this, android.R.layout.simple_spinner_item, extNames);
        adapterExtras.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        adapterExtrasUnd = new ArrayAdapter<String>(Reservar.this, android.R.layout.simple_spinner_item, extUnds);
        adapterExtrasUnd.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

        spinExtra.setAdapter(adapterExtras);
        spinExtraUnd.setAdapter(adapterExtrasUnd);

        btnExtrasCancelar.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                dialogExtras.dismiss();
            }
        });

        btnExtrasAdd.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                btnAddExtrasClick(view);
            }
        });


        WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
        Window window = dialogExtras.getWindow();
        lp.copyFrom(window.getAttributes());
        lp.width = WindowManager.LayoutParams.FILL_PARENT;
        lp.height = WindowManager.LayoutParams.WRAP_CONTENT;
        window.setAttributes(lp);


        dialogExtras.show();
    }

    private void btnAddExtrasClick(View v) {
        // Aquí realizaremos el calculo de los extras y añadiremos el extra al listado

        if (spinExtra.getSelectedItemPosition() == 0) {
            Toast.makeText(Reservar.this, R.string.need_sel_extra, Toast.LENGTH_SHORT).show();
            return;
        }

        int pos = spinExtra.getSelectedItemPosition();
        Integer cod = extCodes.get(pos);

        // Miramos si ya existe dicho extra en el contendor, sino lo añadimos
        if (fn_ComprobarExisteExtra(cod)) {
            Toast.makeText(Reservar.this, R.string.extra_exists, Toast.LENGTH_SHORT).show();
            return;
        }


        final String concepto = extNames.get(pos);
        Double imp = extImportes.get(pos);
        Integer und = spinExtraUnd.getSelectedItemPosition() + 1;
        Double total = 0d;

        //Alquiler
        if (extTipos.get(pos) == 0) {
            total = imp * und;
        }

        //Dias
        if (extTipos.get(pos) == 1) {
            total = imp * und * DIAS_FACTURADOS;
        }

        // Si el importe es menor que el minimo
        if (extMin.get(pos) > 0 && total < extMin.get(pos)) {
            total = extMin.get(pos);
        }

        // Si el importe es mayor que el maximo
        if (extMax.get(pos) > 0 && total > extMax.get(pos)) {
            total = extMax.get(pos);
        }


        LayoutInflater vi = (LayoutInflater) Reservar.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        final View item = vi.inflate(R.layout.lay_extra_item, null);

        TextView txtCod = item.findViewById(R.id.itemExtraCod);
        TextView txtConcepto = item.findViewById(R.id.itemExtraConcepto);
        TextView txtImp = item.findViewById(R.id.itemExtraImporte);
        TextView txtUnd = item.findViewById(R.id.itemExtraUnd);
        TextView txtTotal = item.findViewById(R.id.itemExtraTotal);
        ImageView imgDel = item.findViewById(R.id.itemExtraPapelera);

        txtCod.setText(String.valueOf(cod.intValue()));
        txtConcepto.setText(concepto.toUpperCase());
        txtImp.setText(sqlToMoney(imp));
        txtUnd.setText(String.valueOf(und.intValue()));
        txtTotal.setText(sqlToMoney(total));

        imgDel.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {

                AlertDialog.Builder builder = new AlertDialog.Builder(Reservar.this);

                builder.setTitle(getString(R.string.del_extra));
                builder.setMessage(getString(R.string.quest_del_extra_com) + concepto.toUpperCase() + "'?");

                builder.setPositiveButton(getString(R.string.yes), new DialogInterface.OnClickListener() {

                    public void onClick(DialogInterface dialog, int which) {
                        contenedorExtras.removeView(item);
                        contenedorExtras.requestFocus();
                        sumarImportes();
                        dialog.dismiss();
                    }

                });

                builder.setNegativeButton(getString(R.string.not), new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });

                AlertDialog alert = builder.create();
                alert.show();

            }
        });


        contenedorExtras.addView(item);
        contenedorExtras.requestFocus();

        sumarImportes();

        dialogExtras.dismiss();
    }

    private boolean fn_ComprobarExisteExtra(Integer codigoActual) {
        boolean existe = false;

        for (int i = 0; i < contenedorExtras.getChildCount(); i++) {
            View v = contenedorExtras.getChildAt(i);
            TextView txtCod = v.findViewById(R.id.itemExtraCod);

            int cod = Integer.parseInt(txtCod.getText().toString());

            if (cod == codigoActual.intValue()) {
                existe = true;
                break;
            }
        }

        return existe;
    }

    public void btnConfirmarReservaClick(View v) {
        if (!comprobaciones()) {
            return;
        }

        AlertDialog.Builder builder = new AlertDialog.Builder(Reservar.this);

        builder.setTitle(getString(R.string.new_res));
        builder.setMessage(getString(R.string.quest_new_res));

        builder.setPositiveButton(getString(R.string.yes), new DialogInterface.OnClickListener() {

            public void onClick(DialogInterface dialog, int which) {
                // Do nothing but close the dialog
                dialog.dismiss();

                //Iniciamos la carga de los datos necesarios
                tareaReservar = new asyncReservasConfirmar();
                tareaReservar.execute(null, null, null);
            }

        });

        builder.setNegativeButton(getString(R.string.not), new DialogInterface.OnClickListener() {

            public void onClick(DialogInterface dialog, int which) {
                // Do nothing
                dialog.dismiss();
            }
        });

        AlertDialog alert = builder.create();
        alert.show();
    }

    public boolean comprobaciones() {
        //Comprobaciones previas
        int oev = spinOEV.getSelectedItemPosition();
        String oevtxt = txtOEV.getText().toString().trim();
        int orv = spinORV.getSelectedItemPosition();
        String orvtxt = txtORV.getText().toString().trim();
        String f1 = txtF1.getText().toString().trim();
        String f2 = txtF2.getText().toString().trim();
        String h1 = txtH1.getText().toString().trim();
        String h2 = txtH2.getText().toString().trim();

        String mtr = txtMatricula.getText().toString().trim();

        String nombre = txtNombre.getText().toString().trim();
        String telefono = txtTelefono.getText().toString().trim();
        String email = txtEmail.getText().toString().trim();


        if (oev == 0) {
            Toast.makeText(Reservar.this, R.string.please_suc_e, Toast.LENGTH_SHORT).show();
            return false;
        }

        if (oevtxt.equals("")) {
            Toast.makeText(Reservar.this, R.string.please_suc_e, Toast.LENGTH_SHORT).show();
            txtOEV.requestFocus();
            return false;
        }

        if (f1.equals("")) {
            Toast.makeText(Reservar.this, R.string.please_date_e, Toast.LENGTH_SHORT).show();
            return false;
        }

        if (h1.equals("")) {
            Toast.makeText(Reservar.this, R.string.please_hour_e, Toast.LENGTH_SHORT).show();
            return false;
        }

        if (orv == 0) {
            Toast.makeText(Reservar.this, R.string.please_suc_r, Toast.LENGTH_SHORT).show();
            return false;
        }

        if (orvtxt.equals("")) {
            Toast.makeText(Reservar.this, R.string.please_suc_r, Toast.LENGTH_SHORT).show();
            txtOEV.requestFocus();
            return false;
        }

        if (f2.equals("")) {
            Toast.makeText(Reservar.this, R.string.please_date_r, Toast.LENGTH_SHORT).show();
            return false;
        }

        if (h2.equals("")) {
            Toast.makeText(Reservar.this, R.string.please_hour_r, Toast.LENGTH_SHORT).show();
            return false;
        }


        SimpleDateFormat formatDate = new SimpleDateFormat("dd/MM/yyyy HH:mm");
        Date datef1 = null;
        Date datef2 = null;
        Date dateSistema = new Date();

        try {
            datef1 = formatDate.parse(f1 + " " + h1);
        } catch (Exception e) {
            Toast.makeText(Reservar.this, R.string.format_date_e_novalid, Toast.LENGTH_SHORT).show();
            return false;
        }


        try {
            datef2 = formatDate.parse(f2 + " " + h2);
        } catch (Exception e) {
            Toast.makeText(Reservar.this, R.string.format_date_r_novalid, Toast.LENGTH_SHORT).show();
            return false;
        }

        if (dateSistema.getTime() >= datef1.getTime()) {
            Toast.makeText(Reservar.this, R.string.check_date_minus, Toast.LENGTH_SHORT).show();
            return false;
        }


        if (datef1.getTime() >= datef2.getTime()) {
            Toast.makeText(Reservar.this, R.string.check_date_mayor, Toast.LENGTH_SHORT).show();
            return false;
        }

        if (mtr.equals("")) {
            Toast.makeText(Reservar.this, R.string.need_sel_veh, Toast.LENGTH_SHORT).show();
            return false;
        }

        if (nombre.equals("") || nombre.length() < 3) {
            Toast.makeText(Reservar.this, R.string.enter_client_name, Toast.LENGTH_SHORT).show();
            txtNombre.requestFocus();
            return false;
        }

        if (telefono.equals("") || telefono.length() < 6) {
            Toast.makeText(Reservar.this, R.string.enter_client_tel, Toast.LENGTH_SHORT).show();
            txtTelefono.requestFocus();
            return false;
        }

        if (email.equals("") || !checkEmail(email)) {
            Toast.makeText(Reservar.this, R.string.enter_valid_email, Toast.LENGTH_SHORT).show();
            txtEmail.requestFocus();
            return false;
        }

        return true;
    }

    private boolean checkEmail(String email) {
        return EMAIL_ADDRESS_PATTERN.matcher(email).matches();
    }

    private void btnCamaraClick() {

        int fotos = thumbnails.getChildCount();

        // Pongo +1 porque cuento el txtSinFoto
        if (fotos >= (MAX_PICTURES + 1))
        {
            Toast.makeText(Reservar.this,getString(R.string.onlyAllowed)+" "+ MAX_PICTURES +" "+ getString(R.string.only_allowed3),Toast.LENGTH_SHORT).show();
            return;
        }

        itemSeleccionado = 0;

        new AlertDialog.Builder(this)
                .setTitle(getString(R.string.add_photo))
                .setCancelable(false)
                .setSingleChoiceItems(_options, 0, new DialogInterface.OnClickListener() {

                    public void onClick(DialogInterface dialog, int which) {
                        itemSeleccionado = which;
                    }
                })
                .setPositiveButton("Ok", new DialogInterface.OnClickListener() {

                    public void onClick(DialogInterface dialog, int which) {
                        // TODO Auto-generated method stub

                        if (itemSeleccionado == 0) {
                            // Abrimos la cámara del movil
                            if (Carplus3G.hasBackFacingCamera()) {
                                intentImg();
                            } else {
                                Toast.makeText(Reservar.this, R.string.no_back_camera, Toast.LENGTH_LONG).show();
                            }
                        } else {
                            // Abrimos la galería del movil
                            intentImg();
                        }
                    }

                })
                .setNegativeButton(getString(R.string.cancel), new DialogInterface.OnClickListener() {

                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();

                    }
                }).create().show();

    }

    private File createImageFile() throws IOException {

        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
        String imageFileName = "JPEG_" + timeStamp + "_";
        File storageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES);
        File image = File.createTempFile(
                imageFileName,
                ".jpg",
                storageDir
        );

        ruta_imagen = image.getAbsolutePath();
        return image;
    }

    private void intentImg() {

        if (itemSeleccionado == 0) {
            // Venimos desde opción de hacer fotografía
            Intent cameraImgIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
            if (cameraImgIntent.resolveActivity(getPackageManager()) != null) {
                // Creamos archivo donde se meterá la fotografía
                File photoFile = null;
                try {
                    photoFile = createImageFile();
                } catch (IOException ex) {
                    // No se ha podido crear al archivo de imagen
                }
                // Continuamos si el archivo se ha creado correctamente
                if (photoFile != null) {
                    Uri photoURI = FileProvider.getUriForFile(getApplicationContext(),
                            BuildConfig.APPLICATION_ID +".provider",
                            photoFile);
                    cameraImgIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                    // Lanzamos el intent de la cámara
                    startActivityForResult(cameraImgIntent, REQUEST_TAKE_PHOTO);
                }
            }
        } else {
            // Venismos desde la opción de seleccionar de galería
            Intent intent = new Intent();
            intent.setType("image/*");
            intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);
            intent.setAction(Intent.ACTION_GET_CONTENT);
            startActivityForResult(Intent.createChooser(intent, "Select Picture"), RESULT_LOAD_IMAGE);
        }
    }

    private Bitmap redimensiones(Bitmap miBitmap) {
        //Aqui lo redimensionamos a nuestros maximos
        Matrix matrix = new Matrix();
        float scale = Math.min(((float) MAX_PICTURE_WIDTH / miBitmap.getWidth()), ((float) MAX_PICTURE_HEIGHT / miBitmap.getHeight()));
        matrix.postScale(scale, scale);
        miBitmap = Bitmap.createBitmap(miBitmap, 0, 0, miBitmap.getWidth(), miBitmap.getHeight(), matrix, true);

        DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm");
        String date = df.format(Calendar.getInstance().getTime());
        miBitmap = addWaterMark(miBitmap, date);

        return miBitmap;
    }

    private Bitmap decodeUri(Uri selectedImage) throws FileNotFoundException {

        // Decode image size
        BitmapFactory.Options o = new BitmapFactory.Options();
        o.inJustDecodeBounds = true;
        BitmapFactory.decodeStream(getContentResolver().openInputStream(selectedImage), null, o);

        // The new size we want to scale to
        final int REQUIRED_SIZE = 140;

        // Find the correct scale value. It should be the power of 2.
        int width_tmp = o.outWidth, height_tmp = o.outHeight;
        int scale = 1;
        int scaleX = width_tmp / MAX_PICTURE_WIDTH;
        int scaleY = height_tmp / MAX_PICTURE_HEIGHT;

        if (scaleX > 1 && scaleX > scaleY)
        {
            scale = scaleX;
        }

        if (scaleY > 1 && scaleY > scaleX)
        {
            scale = scaleY;
        }

        // Decode with inSampleSize
        BitmapFactory.Options o2 = new BitmapFactory.Options();
        o2.inSampleSize = scale;
        return BitmapFactory.decodeStream(getContentResolver().openInputStream(selectedImage), null, o2);

    }

    private Bitmap addWaterMark(Bitmap src, String watermark) {
        int w = src.getWidth();
        int h = src.getHeight();

        Paint bgPaint = new Paint();
        bgPaint.setColor(Color.argb(25,0,0,0));  //transparent black,change opacity by changing hex value "AA" between "00" and "FF"

        Bitmap result = Bitmap.createBitmap(w, h, src.getConfig());
        Canvas canvas = new Canvas(result);
        canvas.drawBitmap(src, 0, 0, null);
        Paint paint = new Paint();
        paint.setColor(Color.WHITE);
        paint.setTextSize(20);
        paint.setAntiAlias(true);
        paint.setUnderlineText(false);

        //should draw background first,order is important
        int left=0;
        int right=w;
        int bottom=h;
        //int top = bottom - (h * .25);
        int top = bottom - 30;
        canvas.drawRect(left,top,right,bottom,bgPaint);
        canvas.drawText(watermark, 10 , h-8, paint);

        return result;
    }

    private void addFoto(Bitmap bitmap) {

        Matrix matrix = new Matrix();

        float scale2 = Math.min(((float) 375 / bitmap.getWidth()), ((float) 234 / bitmap.getHeight()));

        matrix = new Matrix();
        matrix.postScale(scale2, scale2);

        Bitmap bitmap2 = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);

        ImageView iBtn = new ImageView(Reservar.this);
        iBtn.setImageBitmap(bitmap);
        iBtn.setFocusable(true);
        iBtn.setFocusableInTouchMode(true);

        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(bitmap2.getWidth(), bitmap2.getHeight());
        layoutParams.gravity = Gravity.CENTER | Gravity.RIGHT;
        layoutParams.rightMargin = 15;
        iBtn.setLayoutParams(layoutParams);

        txtSinFotos.setVisibility(View.GONE);
        thumbnails.addView(iBtn);

        // Pulsación larga en una imagen
        iBtn.setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View thumb) {

                dialogVisor = new Dialog(Reservar.this, R.style.FullHeightDialog);
                dialogVisor.setContentView(R.layout.dg_borrar_foto);
                dialogVisor.setCanceledOnTouchOutside(true);
                dialogVisor.setCancelable(true);

                WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
                Window window = dialogVisor.getWindow();
                lp.copyFrom(window.getAttributes());
                lp.width = WindowManager.LayoutParams.MATCH_PARENT;
                lp.height = WindowManager.LayoutParams.WRAP_CONTENT;
                window.setAttributes(lp);

                dialogVisor.show();

                Button ok = dialogVisor.findViewById(R.id.btnOkVisor);
                Button borrar = dialogVisor.findViewById(R.id.btnBorrarVisor);
                ImageView img = dialogVisor.findViewById(R.id.imagenVisor);

                ImageView btn = (ImageView) thumb;
                Bitmap bmp = ((BitmapDrawable) btn.getDrawable()).getBitmap();
                img.setImageBitmap(bmp);

                ok.setOnClickListener(new View.OnClickListener() {
                    public void onClick(View v) {
                        dialogVisor.dismiss();
                    }

                });
                borrar.setOnClickListener(new View.OnClickListener() {
                    public void onClick(View view) {
                        thumbnails.removeView(thumb);

                        if (thumbnails.getChildCount() == 1)
                        {
                            txtSinFotos.setVisibility(View.VISIBLE);
                        }

                        dialogVisor.dismiss();
                    }
                });
                return false;
            }
        });
        iBtn.requestFocus();
    }
}